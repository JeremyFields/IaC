Resources:
  ec2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: "NetworkOps"
      ImageId: "ami-xxxxxxxxxxxxx"
      InstanceType: "t2.micro"
      SecurityGroupIds:
        - "sg-xxxxxxxxxxxxx"
      SubnetId: "subnet-xxxxxxxxxxxxx"


      Tags:
        - Key: "map-migrated"
          Value: "d-server-xxxxxxxxxxxxx"
        - Key: "CNAME"
          Value: "host-name.cloud.xxx.com""
        - Key: "BackupGroup"
          Value: "nonprod"
        - Key: "owner"
          Value: "Middleware_Team@xxxx.com"
        - Key: "applicationName"
          Value: "Middleware"
        - Key: "applicationGroup"
          Value: "Middleware"
        - Key: "costCenter"
          Value: "xxx"
        - Key: "Name"
          Value: "host-name.xxxx.com"
        - Key: "AssetID"
          Value: "xxxxx"
        - Key: "os"
          Value: "rhel8"

  ec2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: "NetworkOps"
      ImageId: "ami-xxxxxxxxxxxxx"
      InstanceType: "t2.micro"
      SecurityGroupIds:
        - "sg-xxxxxxxxxxxxx"
      SubnetId: "subnet-xxxxxxxxxxxxx"


      Tags:
        - Key: "map-migrated"
          Value: "d-server-xxxxxxxxxxxxx"
        - Key: "CNAME"
          Value: "host-name.dev.cloud.xxxx.com"
        - Key: "BackupGroup"
          Value: "nonprod"
        - Key: "owner"
          Value: "Middleware_Team@xxxx.com"
        - Key: "applicationName"
          Value: "Middleware"
        - Key: "applicationGroup"
          Value: "Middleware"
        - Key: "costCenter"
          Value: "xxx"
        - Key: "Name"
          Value: "host-name.xxxx.com"
        - Key: "AssetID"
          Value: "xxxxx"
        - Key: "os"
          Value: "rhel8"
  
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "devmiddleware"
      Scheme: "internal"
      Type: "application"
      SecurityGroups:
        - "sg-xxxxxxxxxxxxx"
      Subnets:
        - "subnet-xxxxxxxxxxxxx"
        - "subnet-xxxxxxxxxxxxx"
        - "subnet-xxxxxxxxxxxxx"
      Tags:
        - Key: "applicationGroup"
          Value: "Infrastructure"
        - Key: "applicationName"
          Value: "Middleware"
        - Key: "CNAME"
          Value: "middleware.dev.cloud.xxxx.com"
        - Key: "costCenter"
          Value: "xxx"
        - Key: "environment"
          Value: "Dev"
        - Key: "AssetID"
          Value: "xxxxx"
        - Key: "map-migrated"
          Value: "d-server-xxxxxxxxxxxxx"
        - Key: "Name"
          Value: "Middleware"
        - Key: "os"
          Value: "RedHat 7.6"
        - Key: "owner"
          Value: "Middleware_Team@xxxx.com"
  
  targetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "devmiddleware"
      Port: 8080
      Protocol: "HTTP"
      Targets:
        - Id: !Ref ec2Instance1
          Port: 8080
        - Id: !Ref ec2Instance2
          Port: 8080
      TargetType: "instance"
      VpcId: "vpc-xxxxxxxxxxxxx"
  
  listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref targetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: "HTTP"
